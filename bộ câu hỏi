// -------------- Câu hỏi lớn với level --------------
const allQuestions = [
  { term: "happy", definition: "feeling or showing pleasure", level: "easy" },
  { term: "run", definition: "to move swiftly", level: "easy" },
  { term: "book", definition: "a set of pages with writing", level: "easy" },
  { term: "benevolent", definition: "kind and helpful", level: "medium" },
  { term: "justify", definition: "to give a good reason for", level: "medium" },
  { term: "innovative", definition: "using new methods or ideas", level: "medium" },
  { term: "esoteric", definition: "intended for or likely to be understood by few", level: "hard" },
  { term: "ubiquitous", definition: "present everywhere", level: "hard" },
  { term: "vindicate", definition: "to clear from blame or suspicion", level: "hard" },
];

// ------------- Các biến chơi -------------
let questions = [];
let idx = 0;
let players = [
  { name: "Player 1", score: 0 },
  { name: "Player 2", score: 0 }
];
let currentPlayerIndex = 0;
let locked = false;

// DOM
const questionEl = document.getElementById('question');
const choicesEl  = document.getElementById('choices');
const scoreEl    = document.getElementById('score');
const messageEl  = document.getElementById('message');
const nextBtn    = document.getElementById('nextBtn');
const restartBtn = document.getElementById('restartBtn');
const playerEl   = document.getElementById('player-turn');
const resultEl   = document.getElementById('result');
const barEl      = document.getElementById('bar');

// ----------- Hàm lấy ngẫu nhiên bộ câu hỏi theo level -----------
function randomFromArray(arr, n) {
  const copy = [...arr];
  shuffle(copy);
  return copy.slice(0, n);
}

function createQuestionSet() {
  const easyQs = allQuestions.filter(q => q.level === "easy");
  const mediumQs = allQuestions.filter(q => q.level === "medium");
  const hardQs = allQuestions.filter(q => q.level === "hard");

  const selected = [
    ...randomFromArray(easyQs, 2),
    ...randomFromArray(mediumQs, 2),
    ...randomFromArray(hardQs, 1),
  ];
  
  // Tạo mảng câu hỏi chính thức với 4 lựa chọn
  return selected.map(item => {
    const correct = item.definition;
    const pool = allQuestions.filter(d => d.definition !== correct).map(d => d.definition);
    shuffle(pool);
    const choices = [correct, ...pool.slice(0, 3)];
    shuffle(choices);
    return {
      prompt: `What does "${item.term}" mean?`,
      choices,
      answer: correct,
      level: item.level
    };
  });
}

// --------- Cập nhật bảng điểm ---------
function updateScore() {
  scoreEl.textContent = `P1: ${players.score} | P2: ${players.score}`;
}

// --------- Hiển thị lượt chơi ---------
function updatePlayerTurn() {
  playerEl.textContent = `${players[currentPlayerIndex].name}'s turn`;
}

// ---------- Hiển thị câu hỏi ----------
function render() {
  locked = false;
  if (idx >= questions.length) {
    showResult();
    return;
  }
  updatePlayerTurn();
  updateScore();
  resultEl.classList.add('hidden');

  const q = questions[idx];
  questionEl.textContent = q.prompt;
  choicesEl.innerHTML = '';
  messageEl.textContent = '';
  barEl.style.width = `${Math.round((idx / questions.length) * 100)}%`;

  q.choices.forEach(choice => {
    const btn = document.createElement('button');
    btn.textContent = choice;
    btn.onclick = () => {
      if (locked) return;
      locked = true;
      if (choice === q.answer) {
        messageEl.textContent = "Correct!";
        players[currentPlayerIndex].score += 1;
        updateScore();
        btn.classList.add('correct');
      } else {
        messageEl.textContent = `Wrong! Correct is: ${q.answer}`;
        btn.classList.add('wrong');
      }
      // Chọn nút đúng để highlight
      Array.from(choicesEl.children).forEach(b => {
        if (b.textContent === q.answer) b.classList.add('correct');
      });
    };
    choicesEl.appendChild(btn);
  });
}

// -------- Hiển thị kết quả chung cuộc --------
function showResult() {
  barEl.style.width = "100%";
  updateScore();
  const [p1, p2] = players;
  let msg;
  if (p1.score > p2.score) msg = "Player 1 wins! 🎉";
  else if (p2.score > p1.score) msg = "Player 2 wins! 🎉";
  else msg = "Game is a tie!";
  resultEl.textContent = `Game Over! ${msg}`;
  resultEl.classList.remove('hidden');
  playerEl.textContent = "-";
}

// -------- Next lượt chơi (luân phiên người chơi) --------
nextBtn.onclick = () => {
  if (!locked) {
    messageEl.textContent = "Please answer before moving on.";
    return;
  }
  idx++;
  currentPlayerIndex = (currentPlayerIndex + 1) % players.length;
  render();
};

// -------- Khởi động hoặc restart trò chơi --------
restartBtn.onclick = () => {
  questions = createQuestionSet();
  idx = 0;
  players.forEach(p => p.score = 0);
  currentPlayerIndex = 0;
  updateScore();
  render();
};

// Underscore: Trộn mảng
function shuffle(arr) {
  for (let i = arr.length - 1; i >0 ; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

// Chạy lần đầu tiên
restartBtn.onclick();
